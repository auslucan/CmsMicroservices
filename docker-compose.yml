services:
  userdb:
    image: postgres:15
    container_name: userdb
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - userdb_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  contentdb:
    image: postgres:15
    container_name: contentdb
    environment:
      POSTGRES_DB: contentdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - contentdb_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  consul:
    image: consul:1.15
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -dev -client=0.0.0.0
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC port (OpenTelemetry default)
    networks:
      - backend

  userservice:
    build:
      context: src/UserService
      dockerfile: Dockerfile
    container_name: userservice
    ports:
      - "5001:80"
    depends_on:
      userdb:
        condition: service_healthy
      consul:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=userdb;Port=5432;Database=userdb;Username=postgres;Password=postgres
      - ConsulConfig__Address=http://consul:8500
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=userservice
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=Development
    networks:
      - backend

  contentservice:
    build:
      context: src/ContentService
      dockerfile: Dockerfile
    container_name: contentservice
    ports:
      - "5002:80"
    depends_on:
      contentdb:
        condition: service_healthy
      userservice:
        condition: service_started
      consul:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=contentdb;Port=5432;Database=contentdb;Username=postgres;Password=postgres
      - UserService__BaseUrl=http://userservice/
      - UserService__ApiKey=supersecretkey
      - ConsulConfig__Address=http://consul:8500
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=contentservice
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=Development
    networks:
      - backend

volumes:
  userdb_data:
  contentdb_data:

networks:
  backend:
    driver: bridge